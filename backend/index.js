// Must restart server manually after changing middleware
require("dotenv").config();
const express = require("express");
const app = express();
const Person = require("./models/person");

const morgan = require("morgan");
const cors = require("cors");

// express.json parses JSON data into JS object
// When a request is received, express.json() middleware checks if the Content-Type header is set to application/json.
// If the Content-Type is application/json, the middleware parses the JSON data in the request body and constructs a JavaScript object from it.
// The resulting object is then attached to the req.body property, making it accessible to subsequent middleware functions or route handlers.
app.use(express.json());
app.use(express.static("build"));

// Create custom token
morgan.token("reqBody", (req, res) => {
  return JSON.stringify(req.body);
});

// Use pre-existing tokens (method, url etc) and custom token reqBody
app.use(
  morgan(
    ":method :url :status :res[content-length] - :response-time ms :reqBody"
  )
);

app.use(cors());

// Mark inner function as async, to allow countDocuments() to wait for promise to be resolved before returning
app.get("/api/info", async (request, response) => {
  try {
    const numPeople = await Person.countDocuments({});
    const curTime = new Date();
    response.send(`Phonebook has info for ${numPeople} people <br> ${curTime}`);
  } catch (error) {
    console.error("Error:", error);
    response.status(500).send("Internal Server Error");
  }
});

app.get("/api/persons", (request, response) => {
  const body = request.body;
  if (body.content === undefined) {
    return response.status(400).json({ error: "content missing" });
  }
  Person.find({}).then((persons) => {
    response.json(persons);
  });
});

app.get("/api/persons/:id", (request, response, next) => {
  Person.findById(request.params.id)
    .then((person) => {
      if (person) {
        //Filter returned JSON by removing the __v field
        const { __v, ...filteredPerson } = person._doc;
        response.json(filteredPerson);
      } else {
        response.status(404).end();
      }
    })
    .catch((error) => next(error));
});

app.delete("/api/persons/:id", (request, response, next) => {
  // const id = Number(request.params.id);
  // Syntax for MongoDB
  Person.findByIdAndRemove(request.params.id)
    .then((result) => {
      response.status(204).end();
    })
    .catch((error) => next(error));
});

app.post("/api/persons", (request, response) => {
  const body = request.body;

  if (!body.number) {
    return response.status(400).json({
      error: "number must be provided",
    });
  }

  // Check the database for the name you want to add, if found, it will be returned in then statement as existingPerson, and existingPerson will not be null.
  Person.findOne({ name: body.name }).then((existingPerson) => {
    if (existingPerson) {
      return response.status(400).json({
        error: "name must be unique",
      });
    } else {
      const person = new Person({
        // id: generateId(), AUTOGENERATED BY MONGODB
        name: body.name,
        number: body.number,
      });

      person
        .save()
        .then((savedPerson) => {
          response.json(savedPerson);
        })
        .catch((error) => next(error));
    }
  });
});

app.put("/api/persons/:id", (request, response, next) => {
  const { content, important } = request.body;

  const person = {
    name: body.name,
    number: body.number,
  };

  Person.findByIdAndUpdate(
    request.params.id,
    { content, important },
    { new: true, runValidators: true, context: "query" }
  )
    .then((updatedPerson) => {
      response.json(updatedPerson);
    })
    .catch((error) => next(error));
});

const errorHandler = (error, request, response, next) => {
  console.log(error.message);

  if (error.name === "CastError") {
    return response.status(400).send({ error: "malformatted id" });
  } else if (error.name === "validationError") {
    return response.status(400).json({ error: error.message });
  }

  next(error);
};

app.use(errorHandler);

const PORT = process.env.PORT;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
